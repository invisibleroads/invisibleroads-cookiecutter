[app:main]
use = egg:{{cookiecutter.package_name}}
data.folder = %(here)s/production_data
{%- if cookiecutter.database_package == 'sqlalchemy' %}
sqlalchemy.url = sqlite:///%(data.folder)s/database.sqlite
retry.attempts = 3
database.extensions =
{%- endif %}

# Restrict cross origin resource sharing
# cors.allowed_origins =
# cors.allowed_methods =
# cors.allowed_headers =
# Set application environment variables
application.environment =
# Set minimum length for random strings
secret.length = 256

pyramid.reload_templates = false
pyramid.debug_authorization = false
pyramid.debug_notfound = false
pyramid.debug_routematch = false
pyramid.default_locale_name = en
pyramid.includes =

client_cache.http.expiration_time_in_seconds = 3600
server_cache.function.backend = dogpile.cache.memory
server_cache.function.expiration_time = 3600

[server:main]
use = egg:waitress#main
listen = 127.0.0.1:8000

{%- if cookiecutter.database_package == 'sqlalchemy' %}
[pshell]
setup = invisibleroads_records.shells.setup
m = {{cookiecutter.package_name}}.models
[alembic]
script_location = {{cookiecutter.package_name}}/migrations
file_template = %%(year)d%%(month).2d%%(day).2d-%%(rev)s
{%- endif %}

[loggers]
{%- if cookiecutter.database_package == 'sqlalchemy' %}
keys = root, {{cookiecutter.package_name}}, sqlalchemy
{%- else %}
keys = root, {{cookiecutter.package_name}}
{%- endif %}
[handlers]
keys = console
[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
[logger_{{cookiecutter.package_name}}]
level = WARN
handlers =
qualname = {{cookiecutter.package_name}}
{%- if cookiecutter.database_package == 'sqlalchemy' %}
[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine
{%- endif %}

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s:%(lineno)s][%(threadName)s] %(message)s
